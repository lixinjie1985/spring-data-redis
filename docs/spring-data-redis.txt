5.3 RedisConnection and RedisConnectionFactory，用于获取到redis的链接，是一个统一的抽象
可以进行异常转换，根据底层配置，可以返回一个新的链接或已存在链接（如使用连接池技术）
最简单的方式是在容器中配置RedisConnectionFactory，并注入到使用它的类中，其中依赖Jedis的
一个实现类是JedisConnectionFactory，可以指定IP，用户名，密码

5.5 通过RedisTemplate操作对象，该类是核心，提供了与redis交互的高层抽象，RedisConnection提
供了低层的方法来操作二进制字节，RedisTemplate会关注序列化和链接管理，可以让用户不操这个心，
且提供更丰富的操作视图，是线程安全的，可以被多线程重复使用。大部分操作使用基于java的序列化器
序列化机制可以很容易地被替换，可以把序列化器设置为null来直接操作字节数组

5.6 聚焦字符串的方便类，StringRedisConnection，DefaultStringRedisConnection，
StringRedisTemplate，是方便的对于字符串操作的一站式解决方案，使用StringRedisSerializer序列
化器，这种编码人类更容易看懂，可以使用RedisCallback的doInRedis方法来直接操作RedisConnection

5.7 序列化器

5.8 哈希映射

5.9 Redis消息/发布订阅

5.10 Redis事务，默认禁用，需要显式开启，RedisConnection会绑定到当前线程来触发MULTI，如果没有
错误，EXEC将被调用，否则DISCARD，一旦在MULTI当中，RedisConnection将排队写操作，所有的读操作
将到另一个新的RedisConnection上

5.11 管道，一次性向服务器端发送多个命令，一次性的读取多个结果，由于减少了网络传输，所以提供了
性能

5.12 Redis脚本，Lua

5.13 支撑类，基于redis存储实现的多种可复用组件，如JDK的原子操作包，集合包的实现

6.1 启用Redis集群，RedisClusterConnection扩展了RedisConnection，用来和集群通信和转换异常，使用
RedisClusterConfiguration来配置RedisConnectionFactory
spring.redis.cluster.nodes，spring.redis.cluster.max-redirects

6.2 使用Redis集群链接，如果一个命令涉及到多个key，必须保证所有的key都位于同一个哈希槽上，否则产生
异常，一个集群节点只能够服务于它上面有的key集合，如果key不在它上面，它无法服务，例如要获取所有的key
的话，必须去所有的主节点都获取key，然后在累积在一起。底层的驱动会处理哈希槽重定向问题，高层的功能涉
及到跨多节点时，已由RedisClusterConnection来处理，对用户来说是透明的。跨节点的操作如MGET，如果所
有的key都映射到同一个哈希槽，则该命令直接调用底层驱动类库来完成，然而一旦不是上面这种情况，
RedisClusterConnection将并行地执行多个GET命令分别获取值，然后再把这些值累积到一起返回，很明显这样
性能不好，应该慎用，也有办法让多个key位于同一个哈希槽上，那就是使用大括号，且大括号里的值一样就行，
{my-prefix}.foo和{my-prefix}.bar，此时只用大括号里的值来计算哈希
注意，并不是所有的多key命令都可以拆成多个单key命令来执行然后再累积结果

6.3 使用RedisTemplate和集群操作，RedisTemplate通过ClusterOperations接口提供访问集群的特定操作，

7 Redis仓库，可以把Java对象存储到Redis里的哈希，应用自定义映射策略和二级索引，要求Redis:2.8.0+

7.1 使用，@RedisHash和@org.springframework.data.annotation.Id用来创建设计存储到哈希时用的key，
有专门的仓库接口CrudRepository来进行存取，我们可以定义一个PersonRepository来继承仓库接口
CrudRepository<Person, String>，且不用提供实现类，就像mybatis里的Mapper接口一样，只要进行一些
配置，如@EnableRedisRepositories，spring-data-redis会在运行时来实现我们的接口，具体参考官方
文档该章节。其中@RedisHash可以用来指定键空间

7.2 对象到哈希的映射，使用RedisConverter把对象的属性值和redis的字节数组互相转换，可以在
CustomConversions里注册自定义Converter，在对象和byte[]或Map<String,byte[]>间互转

7.3 键空间，作为实际key的前缀，默认是类的全名，可以使用@RedisHash来指定一个前缀

7.4 二级索引，用于基于redis自身的数据结构执行查询操作，使用@Indexed标记一个属性，该属性的值将作
为二级索引，该索引在对象每次保存时被创建，在对象删除或过期时被移除

7.5 生存时间，在类上使用@RedisHash(timeToLive=…​)，也可以在字段或方法上使用@TimeToLive，但不要同时
字段和方法上都使用，返回值需要是一个数字才行，-1表示没有过期设置。当一个对象设置完超时时间后，它的
一个copy也会保存在redis里，且超时时间设置为原来对象超时后5分钟，这样做使Repository支持发布
RedisKeyExpiredEvent事件，且可以拥有超时对象的值，即使原始的超时对象因过期被删除，但已经有一个copy
且在5分钟后该copy才超时。所有已经连接上的应用还可以收到过期事件。默认key过期监听器被禁用

7.6 持久化引用，使用@Reference标记的属性，允许存储属性的一个引用而不是属性值本身，被引用的对象也在
redis里存着呢，在对象加载时，该引用会自动被解析到真实对象。如果被引用的对象发生改变时，需要单独保存
被引用对象，此时光保存引用对象是不行的，因为它只存了个引用。

7.7 持久化部分更新，有时只想更新一个对象的一部分属性而非全部，PartialUpdate可以在已存在对象上定义
set和delete操作，可以跟新和删除指定属性

7.8 查询和查询方法，可以按属性查询，且该属性必须已设置了索引，继承已有的方法有时并不能满足，可以使用
RedisCallback来返回一到多个id，再根据这些id来查找，

7.9 运行在集群上的Redis仓库，为了避免同一个对象的不同属性因key不同而分布到不同的哈希槽上，带来麻烦，
所以要把key订在同一个哈希槽上，在key中使用大括号（{}）即可











